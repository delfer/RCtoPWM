
RCtoPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  00000254  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f9  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000083  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000fa  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000167  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000092  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_18>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  58:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  5c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  60:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  68:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  6c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  70:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a6 30       	cpi	r26, 0x06	; 6
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 98 00 	call	0x130	; 0x130 <main>
  94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <__vector_18>:
volatile uint16_t pulse_hi;
volatile uint16_t pulse_low;
volatile uint16_t pwm_hi;

//Interrupt on RC signal lost (timer1 overflow)
ISR(TIMER1_OVF_vect) {
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
	pulse_low = 0;
  a6:	10 92 05 01 	sts	0x0105, r1
  aa:	10 92 04 01 	sts	0x0104, r1
	pulse_hi = 0;
  ae:	10 92 03 01 	sts	0x0103, r1
  b2:	10 92 02 01 	sts	0x0102, r1
}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_14>:

//Interrupt on RC signal edge
ISR(TIMER1_CAPT_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	//mesured_width.byte[0] = ICR1L;	// grab captured timer1 low byte
	//mesured_width.byte[1] = ICR1H;	// grab captured timer1 high byte
	//mesured_width = ICR1;
	
	//Check state of input
	if (PINC & (1<<PC7))
  d2:	37 9b       	sbis	0x06, 7	; 6
  d4:	0e c0       	rjmp	.+28     	; 0xf2 <__vector_14+0x32>
	{
		//New state is HI
		//Previous is LOW
		
		//Set trigger to falling edge
		TCCR1B &= ~(1 << ICES1 );
  d6:	e1 e8       	ldi	r30, 0x81	; 129
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	80 83       	st	Z, r24
		
		//Capture measured value
		pulse_low = ICR1;
  e0:	80 91 86 00 	lds	r24, 0x0086
  e4:	90 91 87 00 	lds	r25, 0x0087
  e8:	90 93 05 01 	sts	0x0105, r25
  ec:	80 93 04 01 	sts	0x0104, r24
  f0:	0d c0       	rjmp	.+26     	; 0x10c <__vector_14+0x4c>
	{
		//New state is LOW
		//Previous is HI
		
		//Set trigger to rising edge
		TCCR1B |= (1 << ICES1 );
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
		
		//Capture measured value
		pulse_hi = ICR1;
  fc:	80 91 86 00 	lds	r24, 0x0086
 100:	90 91 87 00 	lds	r25, 0x0087
 104:	90 93 03 01 	sts	0x0103, r25
 108:	80 93 02 01 	sts	0x0102, r24
	}
	//Reset counter
	TCNT1 = 0;
 10c:	10 92 85 00 	sts	0x0085, r1
 110:	10 92 84 00 	sts	0x0084, r1
	ICR1 = 0;
 114:	10 92 87 00 	sts	0x0087, r1
 118:	10 92 86 00 	sts	0x0086, r1
	
	//Reset interrupt flag
	TIFR1 |= (1 << ICF1);
 11c:	b5 9a       	sbi	0x16, 5	; 22
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:
	
	//TIMER0
	
	//Start PWM
	//Out to PB7 (OC0A)
	DDRB |= (1<<PINB7 );
 130:	27 9a       	sbi	0x04, 7	; 4
		
	//Timer 0 to Fast PWM with output to OC0A
	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << WGM00) | (1 << WGM01) | (0 << WGM02);
 132:	83 ec       	ldi	r24, 0xC3	; 195
 134:	84 bd       	out	0x24, r24	; 36
		
	//Set prescaler to div by 1
	TCCR0B |= (0 << CS02) | (1 << CS01) | (1 << CS00);
 136:	85 b5       	in	r24, 0x25	; 37
 138:	83 60       	ori	r24, 0x03	; 3
 13a:	85 bd       	out	0x25, r24	; 37
			
	TCNT0 = 0;
 13c:	16 bc       	out	0x26, r1	; 38
	
	//PWM duty 50%
	OCR0A = 127;
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	87 bd       	out	0x27, r24	; 39
		
		
	//TIMER1
	//In on PC7 (ICP1)
	DDRC = 0;
 142:	17 b8       	out	0x07, r1	; 7
	
	//Normal mode
	TCCR1A = 0;
 144:	10 92 80 00 	sts	0x0080, r1
	
	//Nose canceler
	//Timer Capture on Falling Edge
	//Timer speed 16Mhz div 8
	TCCR1B = (1 << ICNC1) | (0 << ICES1 ) | (0 << CS12) | (1 << CS11) | (0 << CS10);
 148:	82 e8       	ldi	r24, 0x82	; 130
 14a:	80 93 81 00 	sts	0x0081, r24
	
	//Reset counter
	TCNT1 = 0;
 14e:	10 92 85 00 	sts	0x0085, r1
 152:	10 92 84 00 	sts	0x0084, r1
	
	//Reset capture
	ICR1 = 0x0000;
 156:	10 92 87 00 	sts	0x0087, r1
 15a:	10 92 86 00 	sts	0x0086, r1
		
	//Turn on interrupts
	sei();
 15e:	78 94       	sei
	
	//Turn on interrupt by ICP and overflow
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1);
 160:	ef e6       	ldi	r30, 0x6F	; 111
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 62       	ori	r24, 0x21	; 33
 168:	80 83       	st	Z, r24
	
	//Reset interrupt flag
	TIFR1 |= (1 << ICF1);
 16a:	b5 9a       	sbi	0x16, 5	; 22
		
		//Calculate new PWN duty
		pwm_hi = ((pulse_hi - 2000) / 8);
		
		if (pwm_hi > 255)
			pwm_hi = 255;
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	30 e0       	ldi	r19, 0x00	; 0
	
		
    while(1)
    {
		//Reset watchdog
		wdt_reset(); 
 170:	a8 95       	wdr
		
		//Calculate new PWN duty
		pwm_hi = ((pulse_hi - 2000) / 8);
 172:	80 91 02 01 	lds	r24, 0x0102
 176:	90 91 03 01 	lds	r25, 0x0103
 17a:	80 5d       	subi	r24, 0xD0	; 208
 17c:	97 40       	sbci	r25, 0x07	; 7
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	90 93 01 01 	sts	0x0101, r25
 18e:	80 93 00 01 	sts	0x0100, r24
		
		if (pwm_hi > 255)
 192:	80 91 00 01 	lds	r24, 0x0100
 196:	90 91 01 01 	lds	r25, 0x0101
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	91 05       	cpc	r25, r1
 19e:	29 f0       	breq	.+10     	; 0x1aa <main+0x7a>
 1a0:	20 f0       	brcs	.+8      	; 0x1aa <main+0x7a>
			pwm_hi = 255;
 1a2:	30 93 01 01 	sts	0x0101, r19
 1a6:	20 93 00 01 	sts	0x0100, r18
		
		//Check for signal valid (1520 us standard)
		//Not less 18ms and not longer than 20ms
		if ((pulse_low < 36000) || (pulse_low > 40000))
 1aa:	80 91 04 01 	lds	r24, 0x0104
 1ae:	90 91 05 01 	lds	r25, 0x0105
 1b2:	80 3a       	cpi	r24, 0xA0	; 160
 1b4:	9c 48       	sbci	r25, 0x8C	; 140
 1b6:	38 f0       	brcs	.+14     	; 0x1c6 <main+0x96>
 1b8:	80 91 04 01 	lds	r24, 0x0104
 1bc:	90 91 05 01 	lds	r25, 0x0105
 1c0:	81 34       	cpi	r24, 0x41	; 65
 1c2:	9c 49       	sbci	r25, 0x9C	; 156
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <main+0x9e>
			pwm_hi = 0;
 1c6:	10 92 01 01 	sts	0x0101, r1
 1ca:	10 92 00 01 	sts	0x0100, r1
		
		OCR0A = 255 - pwm_hi;
 1ce:	80 91 00 01 	lds	r24, 0x0100
 1d2:	90 91 01 01 	lds	r25, 0x0101
 1d6:	80 95       	com	r24
 1d8:	87 bd       	out	0x27, r24	; 39
		//OCR0A = pulse_hi - 2000;

    }
 1da:	ca cf       	rjmp	.-108    	; 0x170 <main+0x40>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
